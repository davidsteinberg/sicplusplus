////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  File: siC++/format.hpp
//  Author: David Steinberg
//  Date: April 28, 2012
//  Description: These functions can format your output.
//
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//											INCLUDE GUARDS
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _SIC_FORMAT_HPP_
#define _SIC_FORMAT_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////
//											INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//											NAMESPACE BEGIN
////////////////////////////////////////////////////////////////////////////////////////////////////

namespace sic {

////////////////////////////////////////////////////////////////////////////////////////////////////
//											GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _SIC_GLOBALS_
#define _SIC_GLOBALS_

std::ostream& userOut = std::cout;
char    userNewLine = '\n',
        userTab     = '\t',
        userSpace   = ' ',
        userEscape  = '\e';

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut

template <class T>
void print (T str) {
	userOut << str;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT REPEAT
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut

template <class T>
void printRepeat (T str, int num) {
	while (num > 0) {
		userOut << str;
		num--;
	}
}

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END GLOBALS
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//											FORMATTING
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//											FORMAT VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////

int	curColor		= 9,
	curBG			= 9,

	styleSize		= 5,
	curStyle[5] 	= { 0 },
	curStyleSize	= 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//											COLORS AND STYLES
////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _DAS_COLOR_AND_STYLE_
#define _DAS_COLOR_AND_STYLE_

enum Color {
	Black = 0,
	Red = 1,
	Green = 2,
	Yellow = 3,
	Blue = 4,
	Magenta = 5,
	Cyan = 6,
	Gray = 7,
	Default = 9,
	
	iBlack = 60,
	iRed = 61,
	iGreen = 62,
	iYellow = 63,
	iBlue = 64,
	iMagenta = 65,
	iCyan = 66,
	iGray = 67
};

enum Style {
	Reset = 0,
	Bold = 1,
	Dim = 2,
	Underline = 4,
	Blink = 5,
	Reverse = 7,
	Hidden = 8
};

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
//											SET COLOR
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curColor

void setColor (int col) {

	col += 30;

	userOut	<< userEscape
			<< "["
			<< col
			<< "m";
				
	curColor = col;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END COLOR
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curColor

void endColor () {

	userOut	<< userEscape
			<< "[39m";

	curColor = 9;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											SET BG
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curBG

void setBG (int col) {

	col += 40;

	userOut	<< userEscape
			<< "["
			<< col
			<< "m";

	curBG = col;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END BG
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curBG

void endBG () {

	userOut	<< userEscape
			<< "[49m";

	curBG = 9;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											SET COLORS
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curColor, curBG

void setColors (int fCol, int bCol) {

	fCol += 30;
	bCol += 40;

	userOut	<< userEscape
			<< "["
			<< fCol
			<< ";"
			<< bCol
			<< "m";

	curColor = fCol;
	curBG = bCol;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END COLORS
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curColor, curBG

void endColors () {

	userOut	<< userEscape
			<< "[39;49m";	

	curColor = 9;
	curBG = 9;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END STYLE
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape, curStyleSize, curStyle[], curColor, curBG

void endStyle () {

	userOut	<< userEscape
			<< "[m";

	for (int i = 0; i < curStyleSize; i++) {
		curStyle[i] = 0;
	}
	
	curStyleSize = 0;

	userOut	<< userEscape
			<< "["
			<< curColor
			<< ";"
			<< curBG
			<< "m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											SET STYLE
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ FUNCTIONS: endStyle()
// REQ VARIABLES: userOut, userEscape, curStyleSize, curStyle[]

void setStyle (int stl) {

	endStyle();

	userOut	<< userEscape
			<< "["
			<< stl
			<< "m";

	curStyle[0] = stl;
	curStyleSize = 1;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											ADD STYLE
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: curStyleSize, styleSize, curStyle[], userOut, userEscape

void addStyle (int stl) {

	if (curStyleSize < styleSize) {

		bool found = false;
	
		for (int i = 0; i < curStyleSize; i++) {
			if (curStyle[i] == stl) {
				found = true;
				break;
			}
		}
		
		if (!found) {

			userOut	<< userEscape
					<< "["
					<< stl
					<< "m";

			curStyle[curStyleSize] = stl;
			curStyleSize++;

		}

	}

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											REMOVE STYLE
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: curStyleSize, curStyle[], userOut, userEscape, curColor, curBG

void removeStyle (int stl) {

	bool passed = false;

	for (int i = 0; i < curStyleSize; i++) {
		if (passed) {
			curStyle[i-1] = curStyle[i];
			curStyle[i] = 0;
		}
		if (curStyle[i] == stl) {
			passed = true;
		}
	}

	curStyleSize--;

	userOut	<< userEscape
			<< "[0m";
	for (int i = 0; i < curStyleSize; i++) {
		userOut	<< userEscape
				<< "["
				<< curStyle[i]
				<< "m";
	}

	userOut	<< userEscape
			<< "["
			<< curColor
			<< ";"
			<< curBG
			<< "m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											SET FORMAT
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ FUNCTIONS: endStyle()
// REQ VARIABLES: userOut, userEscape, curColor, curBG, curStyle

void setFormat (int fCol, int bCol, int stl) {

	endStyle();

	fCol += 30;
	bCol += 40;

	userOut	<< userEscape
			<< "["
			<< stl
			<< ";"
			<< fCol
			<< ";"
			<< bCol
			<< "m";

	curColor = fCol;
	curBG = bCol;
	curStyle[0] = stl;

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END FORMAT
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

void endFormat () {

	userOut	<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT COLOR
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

template <class T>
void printColor (T str, int col) {
	
	col += 30;
	
	userOut	<< userEscape
			<< "["
			<< col
			<< "m"
			<< str
			<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT BG
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

template <class T>
void printBG (T str, int col) {

	col += 40;

	userOut	<< userEscape
			<< "["
			<< col
			<< "m"
			<< str
			<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT COLORS
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

template <class T>
void printColors (T str, int fCol, int bCol) {

	fCol += 30;
	bCol += 40;

	userOut	<< userEscape
			<< "["
			<< fCol
			<< ";"
			<< bCol
			<< "m"
			<< str
			<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT STYLE
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

template <class T>
void printStyle (T str, int stl) {
	
	userOut	<< userEscape
			<< "["
			<< stl
			<< "m"
			<< str
			<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											PRINT FORMAT
////////////////////////////////////////////////////////////////////////////////////////////////////

// REQ VARIABLES: userOut, userEscape

template <class T>
void printFormat (T str, int fCol, int bCol, int stl) {

	fCol += 30;
	bCol += 40;

	userOut	<< userEscape
			<< "["
			<< stl
			<< ";"
			<< fCol
			<< ";"
			<< bCol
			<< "m"
			<< str
			<< userEscape
			<< "[m";

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END FORMATTING
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END NAMESPACE
////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////
//											END INCLUDE GUARDS
////////////////////////////////////////////////////////////////////////////////////////////////////

#endif